type Country {
   _id: Long!
   alpha2Code: String!
   alpha3Code: String!
   area: Float
   capital: String!
   demonym: String!
   gini: Float
   location: Point!
   name: String!
   nativeName: String!
   numericCode: String
   population: Float!
   hastopleveldomain: [TopLevelDomain] @relation(name: "hasTopLevelDomain", direction: "OUT")
   hascallingcode: [CallingCode] @relation(name: "hasCallingCode", direction: "OUT")
   hasalternativespelling: [AlternativeSpelling] @relation(name: "hasAlternativeSpelling", direction: "OUT")
   hastimezone: [Timezone] @relation(name: "hasTimezone", direction: "OUT")
   hassubregion: [Subregion] @relation(name: "hasSubregion", direction: "OUT")
   haslocale: [Translation] @relation(name: "hasLocale", direction: "OUT")
   hasflag: [Flag] @relation(name: "hasFlag", direction: "OUT")
   hasofficiallanguage: [Language] @relation(name: "hasOfficialLanguage", direction: "OUT")
   hascurrency: [Currency] @relation(name: "hasCurrency", direction: "OUT")
   hasregionalbloc: [RegionalBloc] @relation(name: "hasRegionalBloc", direction: "OUT")
   borders: [Country] @relation(name: "borders", direction: "OUT")
}

type TopLevelDomain {
   _id: Long!
   name: String!
   countrys: [Country] @relation(name: "hasTopLevelDomain", direction: "IN")
}

type CallingCode {
   _id: Long!
   name: String!
   countrys: [Country] @relation(name: "hasCallingCode", direction: "IN")
}

type AlternativeSpelling {
   _id: Long!
   name: String!
   countrys: [Country] @relation(name: "hasAlternativeSpelling", direction: "IN")
}

type Timezone {
   _id: Long!
   name: String!
   countrys: [Country] @relation(name: "hasTimezone", direction: "IN")
}

type Subregion {
   _id: Long!
   name: String!
   hasregion: [Region] @relation(name: "hasRegion", direction: "OUT")
   countrys: [Country] @relation(name: "hasSubregion", direction: "IN")
}

type Region {
   _id: Long!
   name: String!
   subregions: [Subregion] @relation(name: "hasRegion", direction: "IN")
}

type Translation {
   _id: Long!
   languageCode: String!
   value: String!
   countrys: [Country] @relation(name: "hasLocale", direction: "IN")
}

type Flag {
   _id: Long!
   emoji: String!
   emojiUnicode: String!
   svgFile: String!
   countrys: [Country] @relation(name: "hasFlag", direction: "IN")
}

type Language {
   _id: Long!
   iso639_1: String!
   iso639_2: String!
   name: String!
   nativeName: String!
   countrys: [Country] @relation(name: "hasOfficialLanguage", direction: "IN")
}

type Currency {
   _id: Long!
   code: String!
   name: String!
   symbol: String!
   countrys: [Country] @relation(name: "hasCurrency", direction: "IN")
}

type RegionalBloc {
   _id: Long!
   acronym: String!
   name: String!
   hasothername: [OtherName] @relation(name: "hasOtherName", direction: "OUT")
   hasotheracronym: [OtherAcronym] @relation(name: "hasOtherAcronym", direction: "OUT")
   countrys: [Country] @relation(name: "hasRegionalBloc", direction: "IN")
}

type OtherName {
   _id: Long!
   name: String!
   regionalblocs: [RegionalBloc] @relation(name: "hasOtherName", direction: "IN")
}

type OtherAcronym {
   _id: Long!
   name: String!
   regionalblocs: [RegionalBloc] @relation(name: "hasOtherAcronym", direction: "IN")
}

type Unit {
   _id: Long!
   name: String!
   unit: String!
   value: String!
}
















